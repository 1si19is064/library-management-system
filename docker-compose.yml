version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: library_postgres
    environment:
      POSTGRES_DB: library
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - library_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d library"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: library_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - library_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Go Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: library_api
    environment:
      # Use external database URLs for production
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:password123@postgres:5432/library?sslmode=disable}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      PORT: "8080"
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - library_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  library_network:
    driver: bridge